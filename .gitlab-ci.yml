stages:
  - test
  - deploy
  - release

include:
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml

.poetry install:
  stage: test
  needs: []
  image: musicscience37/pipenv:jammy
  variables:
    PYTHON_VERSION: "3.12"
  before_script:
    - poetry config virtualenvs.in-project true
    - poetry env use ${PYTHON_VERSION}
    - poetry install
  cache:
    key:
      prefix: ${CI_JOB_NAME}-${PYTHON_VERSION}
      files:
        - poetry.lock
    paths:
      - .venv
  interruptible: true

pre-commit:
  extends: .poetry install
  script:
    - poetry run pre-commit run --all-files

python checks:
  extends: .poetry install
  script:
    - poetry run pylint py_msgpack_rpc tests
    - poetry run mypy py_msgpack_rpc tests
    - poetry run flake8 py_msgpack_rpc tests
    - poetry run pydocstyle py_msgpack_rpc tests

tests:
  extends: .poetry install
  script:
    - poetry run pytest --cov py_msgpack_rpc tests
    - poetry run coverage report
    - poetry run coverage xml
    - poetry run coverage html
    - curl -Os https://uploader.codecov.io/latest/linux/codecov
    - chmod +x codecov
    - ./codecov
  artifacts:
    paths:
      - .coverage
      - coverage.xml
      - htmlcov
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    when: always
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'

spell check:
  stage: test
  needs: []
  image: node
  script:
    - npm install -g cspell
    - cspell lint
      "**/*.py"
      "**/*.txt"
      "**/*.md"
      "**/*.rst"
      "**/*.yaml"
      "**/*.yml"
      "**/*.json"
      "**/*.toml"
      "**/*.sh"
      "**/*.bash"
  interruptible: true

publish-package:
  extends: .poetry install
  needs: []
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG =~ /^v/
  script:
    - poetry build
    - poetry config pypi-token.pypi ${PYPI_TOKEN}
    - poetry publish

build document:
  extends: .poetry install
  stage: test
  needs: []
  rules:
    - if: $CI_COMMIT_TAG =~ /^v/
      variables:
        PROJECT_VERSION: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH
      variables:
        PROJECT_VERSION: $CI_COMMIT_SHORT_SHA
  script:
    - poetry run bash ./doc/update_apidoc.sh
    - poetry run sphinx-build -b html -W -q -D release=$PROJECT_VERSION
      doc/source doc/build
  artifacts:
    paths:
      - doc/build

pages:
  image: alpine
  stage: deploy
  needs: [build document]
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - mv doc/build public
  artifacts:
    paths:
      - public

release:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: release
  needs: []
  rules:
    - if: $CI_COMMIT_TAG =~ /^v/
  script:
    - echo "This is a release job."
  release:
    tag_name: $CI_COMMIT_TAG
    name: "$CI_COMMIT_TAG"
    description: "./doc/source/change_log/${CI_COMMIT_TAG}.md"
